
public class ArrrayAlgorithms 
{
	public static void main(String[] args)
	{
		int[] arr = {2, 1, 4, 3, 6, 5, 8, 7};
		int[] arr2 = {1, 3, 5, 7, 9};
		int[] arr3 = {1, 2, 1, 2, 3, 4, 5, 1, 2, 3};
		int[] arrEvens;
		
		int min;
		int max;
		int sum;
		double average;
		int index;
		int val;
		int count;
		
		//method 1
		min = findMin(arr);
		System.out.println("Smallest value: " + min);
		
		//method 2
		max = findMax(arr);
		System.out.println("\nLargest value: " + max);
		
		//method 3
		sum = calcSum(arr);
		System.out.println("\nSum of all elements: " + sum);
		
		//method 4
		average = findAvg(arr);
		System.out.println("\nAverage of all elements: " + average);
		
		//method 5
		val = 4;
		index = findVal(arr, val);
		
		if (val != -1)
			System.out.println("\n" + val + " was found at position " + index);
		else
			System.out.println("\n" + val + " was not found");
		
		val = 10;
		index = findVal(arr, val);
		
		if (val != -1)
			System.out.println("\n" + val + " was found at position " + index);
		else
			System.out.println("\n" + val + " was not found");
		
		//method 6
		System.out.println("\nAdd Pairs: ");
		addPairs(arr);
		
		System.out.println("\n\nAdd Pairs: ");
		addPairs(arr2);
		
		//method 7
		val = 1;
		count = countDuplicates(arr3, val);
		System.out.println("\n" + val + " occurs " + count + " time(s) in the array");
		
		val = 5;
		count = countDuplicates(arr3, val);
		System.out.println("\n" + val + " occurs " + count + " time(s) in the array");
		
		//method 8
		count = countOdds(arr);
		System.out.println("\nOdd values: " + count);
		
		//method 9
		arrEvens = removeEvens(arr);
		System.out.println("\nNew array of even values: ");
		for (int i : arrEvens)
			System.out.print(i + " ");
		System.out.println();
		
		arrEvens = removeEvens(arr3);
		System.out.println("\nNew array of even values: ");
		for (int i : arrEvens)
			System.out.print(i + " ");
		System.out.println();
		
		//method 10
		shiftLeft(arr);
		System.out.println("\nArray values shifted left: ");
		for (int i : arr)
			System.out.print(i + " ");
		System.out.println();
		
		//method 11
		reverseArr(arr);
		System.out.println("\nArray in reverse order: ");
		for (int i : arr)
			System.out.print(i + " ");
		System.out.println();
	}
	
	//method 1
	//finds and returns the smallest value in the array
	public static int findMin(int[] arr)
	{
		int min = arr[0];
		for(int i = 1; i < arr.length; i++)
		{
			if(arr[i] < min)
				min = arr[i];
		}
		return min;
	}
	
	//method 2
	//finds and returns the largest value in the array
	public static int findMax(int[] arr)
	{
		int max = Integer.MIN_VALUE;
		for(int i = 0; i < arr.length; i++)
		{
			if(arr[i] > max)
				max = arr[i];
		}
		return max;
	}	
	
	//method 3
	//calculates and returns the sum of all elements in the array
	public static int calcSum(int[] arr)
	{
		int sum = 0;
		for(int i = 0; i < arr.length; i++)
			sum += arr[i];
		return sum;
	}
	
	//method 4
	//calculates and returns the average of the elements in the array
	public static double findAvg(int[] arr)
	{
		double total = 0;
		for(int i = 0; i < arr.length; i++)
			total += arr[i];
		double avg = total/arr.length;
		return avg;
	}
	
	//method 5
	//finds and return the position of where val is found in the array
	//returns -1 if val is not found
	public static int findVal(int[] arr, int val)
	{
		int index = -1;
		for(int i = 0; i<arr.length; i++)
			if(arr[i] == val)
				index = i;
		return index;
	}
	
	//method 6
	//adds up and displays the sum of each set of pairs in the array
	//if the array contains an odd number of elements, double the final value and display it
	public static void addPairs(int[] arr)
	{
		if(arr.length % 2 == 0)
			for(int i = 0; i < arr.length; i += 2)
				System.out.print(arr[i] + arr[i+1] + " ");
		if(arr.length % 2 != 0)
		{
			for(int i = 0; i < arr.length-1; i+=2)
				System.out.print(arr[i] + arr[i+1] + " ");
			System.out.print(arr[arr.length-1]*2);
		}
	}
	
	//method 7
	//count and return the number of times val occurs in the array
	public static int countDuplicates(int[] arr, int val)
	{
		int times = 0;
		for(int i = 0; i < arr.length; i++)
			if(arr[i] == val)
				times++;
		return times;
	}
	
	//method 8
	//count and return the number of odd elements in the array
	public static int countOdds(int[] arr)
	{
		int times = 0;
		for(int i = 0; i < arr.length; i++)
			if(arr[i]%2 != 0) 
				times++;
		return times;
	}
	
	//method 9
	//return a new array of only the even numbers from the array
	public static int[] removeEvens(int[] arr)
	{
		int times = 0;
		int index = 0;
		for(int i = 0; i < arr.length; i++)
			if(arr[i]%2 == 0) 
				times++;
		int[] newArr = new int[times];
		for(int i = 0; i < arr.length; i++)
		{
			if(arr[i]%2 == 0) 
			{
				newArr[index] = arr[i];
				index++;
			}
		}
		return newArr;
	}
	
	//method 10
	//shift all of the values in the array to the left
	//the first value will move to the end of the array
	public static void shiftLeft(int[] arr)
	{
	int store = arr[0];
	for(int i = 1; i < arr.length; i++)
		arr[i-1] = arr[i];
	arr[arr.length-1] = store;
	}
	
	//method 11
	//reverse the elements in the array
	public static void reverseArr(int[] arr)
	{
		int store = 0;
		for(int i = 1; i <= arr.length/2; i++)
		{
			store = arr[i-1];
			arr[i-1] = arr[arr.length-i];
			arr[arr.length-i] = store;
		}
	}
}

